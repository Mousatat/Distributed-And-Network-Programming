syntax = "proto3";

import "google/protobuf/empty.proto";

// Methods for the Register to communicate with 
// Node and Client entities.
service RegisterService {

    // Invoked by Node to Register itself with given ip address 
    // and port. Returns registered id and m, where 
    // m - size of key for chord ring.
    rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse);

    // Register drop Node out of the chord ring.
    rpc DeregisterNode(DeregisterNodeRequest) returns (DeregisterNodeResponse);

    // Share list of all neighbours and predecessor
    // to node with given id.
    rpc PopulateFingerTable(PopulateFingerTableRequest) returns (PopulateFingerTableResponse);
    
    // Share to Client list of all existing nodes in the chord ring.
    rpc GetChordInfo(google.protobuf.Empty) returns (GetChordInfoResponse);

    // Default method for all services to identify type of service
    rpc GetServiceName(google.protobuf.Empty) returns (GetServiceNameResponse);
}

// Methods for the Node to communicate with 
// Register and Client entities.
service NodeService {

    // Client call Node to get finger table of this Node.
    rpc GetFingerTable(google.protobuf.Empty) returns (GetFingerTableResponse);

    // Client (or Node) call Node to save text on some Node,
    // which id (target Node id) will be evaluated using key
    // on called Node using lookup.
    rpc Save(SaveRequest) returns (SaveResponse);

    // Client (or Node) call Node to remove key and corresponding text,
    // which id (target Node id) will be evaluated using key 
    // on called Node using lookup.
    rpc Remove(RemoveRequest) returns (RemoveResponse);

    // Client (or Node) call Node to find text by given key,
    // which id (target Node id) will be evaluated using key 
    // on called Node using lookup.
    rpc Find(FindRequest) returns (FindResponse);

    // Default method for all services to identify type of service
    rpc GetServiceName(google.protobuf.Empty) returns (GetServiceNameResponse);
}

message NodeAddress {
    string ip = 1;
    uint32 port = 2;
}

message RegisterNodeRequest {
    NodeAddress address = 1;
}

message RegisterNodeResponse {
    
    // Generated id by Register.
    uint32 node_id = 1;

    // Size of key (in bits)
    // to identify size of the chord ring.
    uint32 m = 2;
}

message DeregisterNodeRequest {
    uint32 node_id = 1;
}

message DeregisterNodeResponse {

    // True if deregistered,
    // False otherwise.
    bool is_deregistered = 1;
}

message NodeAddressAndId {
    uint32 id = 1;
    NodeAddress address = 2;
}

message PopulateFingerTableRequest {

    // Node's id to get all its neighbours
    // to communicate with.
    uint32 node_id = 1;
}

message PopulateFingerTableResponse {
    
    // Predecessor's node id of given id
    // and its address.
    uint32 pred_id = 1;
    NodeAddress pred_address = 2;

    // Neighbours to communicate with.
    repeated NodeAddressAndId neighbours = 3;

}

message GetChordInfoRequest {}

message GetChordInfoResponse {
    
    // List of nodes in the chord ring.
    map<uint32, NodeAddress> nodes = 1; 
}

message GetFingerTableRequest {}

message GetFingerTableResponse {

    // Finger table of a Node.
    // id and corresponding address
    map<uint32, NodeAddress> neighbours = 1;
}

message SaveRequest {

    // Key to store value by that key,
    // also to save it corresponding node id
    // is calculated using hash function of that key.
    string key = 1;


    string text = 2;
}

message SaveResponse {

    // True if was saved.
    bool is_saved = 1;

    // Node's id where key was saved on.
    uint32 node_id = 2;
}

message RemoveRequest {
    
    // Key to remove value and key itself
    // by that key, defining the node like in 
    // save method.
    string key = 1; 
}

message RemoveResponse {

    // True if was deleted.
    bool is_deleted = 1;

    // Node's id from where a key was removed.
    uint32 node_id = 2;
}

message FindRequest {

    // Key value to identify
    // Node responsible for that key.
    string key = 1;
}

message FindResponse {

    // True if founded,
    // False otherwise.
    bool is_found = 1;

    // Node's id where key was found on.
    uint32 node_id = 2;

    // Node's address where key was found on.
    NodeAddress node_address = 3;

    // Text saved on this node
    string text = 4;
}

// message QuitRequest {
//     uint32 node_id = 1;
// }

// message QuitResponse {
//     // TODO
// }

message GetServiceNameRequest {}

message GetServiceNameResponse {
    string service_name = 1;

    // Optional for Nodes
    uint32 node_id = 2;
}